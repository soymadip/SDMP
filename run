#!/bin/bash

set -a
[ -f .env ] && source .env
set +a

PROJECT_NAME="SDMP"
COMPOSE_FILE="docker-compose.yml"

# Colors
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
NC="\033[0m"

# Logging functions
info() {
  echo -e "${GREEN}[INFO]${NC} $1"
}
warn() {
  echo -e "${YELLOW}[WARN]${NC} $1"
}
error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

#
# Detect if Docker or Podman should be used
if [ -n "$1" ]; then
  CONTAINER_RUNTIME="$1"
elif [ -n "$CONTAINER_RUNTIME" ]; then
  info "Using CONTAINER_RUNTIME from .env: $CONTAINER_RUNTIME"
else
  if command -v podman >/dev/null 2>&1; then
    CONTAINER_RUNTIME="podman"
  elif command -v docker >/dev/null 2>&1; then
    CONTAINER_RUNTIME="docker"
  else
    error "Neither Docker nor Podman is installed. Exiting..."
    exit 1
  fi
fi

#
# Set the correct compose command
if [ "$CONTAINER_RUNTIME" = "podman" ]; then
  COMPOSE_CMD="podman-compose"
elif [ "$CONTAINER_RUNTIME" = "docker" ]; then
  COMPOSE_CMD="docker compose"
else
  error "Invalid container runtime selected: $CONTAINER_RUNTIME"
  exit 1
fi


# Check & create data directories
for dir in "data" "data/postgres" "data/pgadmin"; do
  if [ ! -d "$dir" ]; then
    warn "$dir not found! Creating..."
    mkdir -p "$dir"
    chmod 777 "$dir"
    info "$dir created."
  fi
done


info "Starting $PROJECT_NAME using $CONTAINER_RUNTIME..."

# Check if containers are already running
if $COMPOSE_CMD ps | grep -q "Up"; then
  info "Containers are already running. Skipping startup..."
else
  info "Starting services..."
  $COMPOSE_CMD up -d

  if [ $? -ne 0 ]; then
    error "Failed to start services!"
    exit 1
  fi
fi

info "Access your services:"
echo "   - PHP App:   http://localhost:8080"
echo "   - pgAdmin:   http://localhost:5050 (Login: ${PGADMIN_DEFAULT_EMAIL:-admin@local.in})"

info "Press Ctrl+C to stop all services..."

# Ensure services stop when user exits
trap '$COMPOSE_CMD down; info "Services stopped. Exiting..."; exit 0' SIGINT

# Keep script running until interrupted
while true; do sleep 1; done
