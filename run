#!/bin/bash

set -e

DATA_DIR="./data"
POSTGRES_DATA_DIR="${DATA_DIR}/postgres"
PGADMIN_DATA_DIR="${DATA_DIR}/pgadmin"
APP_DIR="./app"

# Color codes
BLUE="\e[34m"
YELLOW="\e[33m"
RED="\e[31m"
MAGENTA="\e[35m"
NC="\e[0m"

# ------------------------------------------------

clear 

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_done() { echo -e "${MAGENTA}[INFO] $1${NC}"; }

# Parse command line arguments
VERBOSE=false
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -rd|--remove-data)
            REMOVE_DATA=true
            shift
            ;;
        *)
            log_error "Unknown option: $1"
            echo "Usage: $0 [-v|--verbose]"
            exit 1
            ;;
    esac
done

# Detect container runtime
if command -v podman &>/dev/null; then
    CONTAINER_RUNTIME="podman"
elif command -v docker &>/dev/null; then
    log_warn "Podman not found. Falling back to Docker."
    CONTAINER_RUNTIME="docker"
else
    log_error "Neither Podman nor Docker is installed."
    log_info "Install Podman: https://podman.io/getting-started/installation"
    log_info "Install Docker: https://docs.docker.com/get-docker/"
    exit 1
fi


# Detect compose tool
if [ "$CONTAINER_RUNTIME" = "podman" ]; then
    if command -v podman-compose &>/dev/null; then
        COMPOSE_CMD="podman-compose"
    else
        log_error "Podman is selected, but podman-compose is not installed."
        log_info "Install podman-compose: pip install podman-compose"
        exit 1
    fi
else
    if command -v docker compose &>/dev/null; then
        COMPOSE_CMD="docker compose"
    elif command -v docker-compose &>/dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        log_error "Docker is selected, but neither 'docker compose' nor 'docker-compose' is installed."
        log_info "Install Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
fi


# Load environment variables from .env
if [ -f .env ]; then
    log_info "Loading environment variables from .env..."
    set -a
    source .env
    set +a
else
    log_warn ".env file not found! Some environment variables may be missing."
fi


# Ensure required directories exist
log_info "Setting up directories..."
mkdir -p "$POSTGRES_DATA_DIR" "$PGADMIN_DATA_DIR" "$APP_DIR"
cp assets/DO_NOT_EDIT "$DATA_DIR/"

# Fix ownership (for Podman)
if [ "$CONTAINER_RUNTIME" = "podman" ]; then
    log_info "Fixing permissions for Podman..."
    $CONTAINER_RUNTIME unshare chown -R 70:70 "$POSTGRES_DATA_DIR"
    $CONTAINER_RUNTIME unshare chown -R 5050:5050 "$PGADMIN_DATA_DIR"
fi

# Fix SELinux labels (if applicable)
if command -v getenforce &>/dev/null && [ "$(getenforce)" != "Disabled" ]; then
    log_info "Adjusting SELinux labels..."
    chcon -Rt container_file_t "$POSTGRES_DATA_DIR" "$PGADMIN_DATA_DIR" "$APP_DIR" || log_warn "SELinux adjustment failed, continuing..."
fi


app() {

    log_info "Starting services with $CONTAINER_RUNTIME..."

    if [ "$VERBOSE" = true ]; then

        $COMPOSE_CMD up
        exit 0
    else
        # Run in detached mode (no logs)
        $COMPOSE_CMD up -d
        sleep 3
        
        echo 
        log_info "Services running in background."
        log_info "Access your services:"
        echo -e "        - PHP App:    http://localhost:8080"
        echo -e "        - SQL server: http://localhost:5432"
        echo -e "        - pgAdmin:    http://localhost:5050 (Login: ${PGADMIN_DEFAULT_EMAIL})\n"

        log_done "Press Ctrl+C to stop all services."
        
        while true; do
            sleep 10 &
            wait $!
        done
    fi
}


stop() {
    echo
    log_info "Stopping services..."
    $COMPOSE_CMD down
    
    if [ "$REMOVE_DATA" = true ]; then
        log_info "Removing data directories..."
        rm -rf "$DATA_DIR"
    fi

    echo
    log_done "Services stopped. Bye!"
    exit 0
}

# Set up signal handling
trap stop INT TERM

# Start app
app

